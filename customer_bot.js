// customer_bot.js

require('dotenv').config();
const { Telegraf, Markup, session } = require('telegraf');
const supabase = require('./lib/supabase');

const bot = new Telegraf(process.env.CUSTOMER_BOT_TOKEN);
bot.use(session());

// URL –≤–∞—à–µ–≥–æ Web App
const WEB_APP_URL = process.env.WEBAPP_URL || 'https://wasupsurf.onrender.com';

bot.start(async (ctx) => {
  // 1) –ö–Ω–æ–ø–∫–∞ Web App
  await ctx.reply(
    '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WaSUP Surf! üëã\n' +
    '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:',
    Markup.inlineKeyboard([
      [ Markup.button.webApp('üåä –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', WEB_APP_URL) ]
    ])
  );

  // 2) –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
  const { data: products, error } = await supabase
    .from('products')
    .select('id,name')
    .eq('available', true);

  if (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤:', error);
    return ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
  if (!products.length) {
    return ctx.reply(
      '–°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞.\n' +
      '–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∞—Ä–µ–Ω–¥—É SUP-–¥–æ—Å–∫–∏ —Ç–∞–º.'
    );
  }

  const buttons = products.map(p =>
    [ Markup.button.callback(p.name, `SHOW_${p.id}`) ]
  );
  await ctx.reply(
    '–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑:',
    Markup.inlineKeyboard(buttons)
  );
});

bot.action(/SHOW_(\d+)/, async (ctx) => {
  const id = ctx.match[1];
  const { data: prod, error } = await supabase
    .from('products')
    .select('id,name,description,price,image_url')
    .eq('id', id)
    .single();

  if (error || !prod) {
    console.error('Error fetching product:', error);
    return ctx.reply('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.');
  }

  await ctx.replyWithPhoto(
    { url: prod.image_url },
    {
      caption:
        `*${prod.name}*\n${prod.description}\n\n` +
        `–¶–µ–Ω–∞: ${prod.price}‚ÇΩ`,
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard([
        [ Markup.button.callback('‚úÖ –ó–∞–∫–∞–∑–∞—Ç—å', `ORDER_${prod.id}`) ]
      ])
    }
  );
  await ctx.answerCbQuery();
});

bot.action(/ORDER_(\d+)/, (ctx) => {
  const prodId = ctx.match[1];
  ctx.session.ordering = { product_id: prodId };
  return ctx.reply('–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:');
});

bot.on('text', async (ctx) => {
  // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ —Å–µ—Å—Å–∏–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ
  if (ctx.session && ctx.session.ordering) {
    const qty = parseInt(ctx.message.text, 10);
    if (!qty || qty < 1) {
      return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0).');
    }

    const { product_id } = ctx.session.ordering;
    const { error } = await supabase
      .from('orders')
      .insert([{ user_id: ctx.chat.id, product_id, quantity: qty }]);

    delete ctx.session.ordering;

    if (error) {
      console.error('Error creating order:', error);
      return ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }

    return ctx.reply('–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω.');
  }

  // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—Ä–∏—à—ë–ª –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–∫–∞–∑–∞
  return ctx.reply('–ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä.');
});

bot.launch()
  .then(() => console.log('Customer bot started'))
  .catch(console.error);

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
